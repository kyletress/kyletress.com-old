// Prefix
//@mixin prefix($property, $value) {
  //-webkit-#{$property}: #{$value};
  //-moz-#{$property}: #{$value};
  //-ms-#{$property}: #{$value};
  //-o-#{$property}: #{$value};
  //#{$property}: #{$value};
//}

// Pixel fallback for Rems

@function calculateRem($size) {
  $remSize: $size / 10px;
  @return $remSize * 1rem;
}

@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@mixin prefix($map, $vendors: webkit moz ms o) {
  @each $prop, $value in $map {
    @if $vendors {
      @each $vendor in $vendors {
        #{"-" + $vendor + "-" + $prop}: #{$value};
      }
    }
    #{$prop}: #{$value};
  }
}

// Breakpoints
@mixin breakpoint($value) {
  @if $value == phablet {
    @media (min-width:600px) { @content; }
  }

  @else if $value == tablet {
    @media (min-width: 768px ) { @content; }
  }

  @else if $value == desktop {
    @media (min-width: 992px) { @content; }
  }

  @else if $value == hd {
    @media (min-width: 1200px ) { @content; }
  }

  @else {
    @warn "Breakpoint mixin supports: phablet, tablet, desktop, or hd";
  }
}

// Flexbox
@mixin flexbox {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin align-items($value: stretch) {
  @include prefix((align-items: $value));
}

@mixin order($int) {
  @include prefix((order: $int));
}

@mixin flex($int) {
  @include prefix((flex: $int));
}

// Layout

@mixin container {
  width:$container-width; // 90%
  margin: 0 auto;
  max-width:$container-max-width;
  @media screen and (min-width: $bp-hd) {
    max-width: $container-hd-max-width;
  }
}

@mixin border-radius($radius: 0) {
  @include prefix((border-radius: $radius));
}

@mixin inline-navigation($margin) {
  ul {
    list-style:none;
    margin:0;
    padding:0;

    li {
      display:inline-block;
      margin-right:$margin;

      &:last-child {
        margin-right: 0;
      }
    }
  }
}

@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

// Give a pixel value, get a rem
@mixin font-size($size) {
  size: $size;
  size: calculateRem($size);
}

// Units output pixels and rems
@mixin rem($property, $values...) {
  $max: length($values);
  $pxValues: '';
  $remValues: '';

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $pxValues: #{$pxValues + $value*10}px;

    @if $i < $max {
      $pxValues: #{$pxValues + " "};
    }
  }

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $remValues: #{$remValues + $value}rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
    }
  }

  #{$property}: $pxValues;
  #{$property}: $remValues;
}
